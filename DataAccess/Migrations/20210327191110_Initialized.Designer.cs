// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(SurveyContext))]
    [Migration("20210327191110_Initialized")]
    partial class Initialized
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entity.AnswerEntity", b =>
                {
                    b.Property<string>("IdAnswer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GetAnswer")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("SurveyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdAnswer");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UserId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("Entity.CategoryEntity", b =>
                {
                    b.Property<string>("IdCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameCategory")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("SurveyId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdCategory");

                    b.HasIndex("SurveyId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Entity.QuestionEntity", b =>
                {
                    b.Property<string>("IdQuestions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GetQuestion")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("SurveyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdQuestions");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UserId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("Entity.SurveyEntity", b =>
                {
                    b.Property<string>("IdSuvey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdSuvey");

                    b.HasIndex("UserId");

                    b.ToTable("Survey");
                });

            modelBuilder.Entity("Entity.UserEntity", b =>
                {
                    b.Property<string>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("IdUser");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Entity.AnswerEntity", b =>
                {
                    b.HasOne("Entity.CategoryEntity", "Category")
                        .WithMany("Answers")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Entity.SurveyEntity", "Survey")
                        .WithMany("Answers")
                        .HasForeignKey("SurveyId");

                    b.HasOne("Entity.UserEntity", "User")
                        .WithMany("Answers")
                        .HasForeignKey("UserId");

                    b.Navigation("Category");

                    b.Navigation("Survey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.CategoryEntity", b =>
                {
                    b.HasOne("Entity.SurveyEntity", "Survey")
                        .WithMany("Categories")
                        .HasForeignKey("SurveyId");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Entity.QuestionEntity", b =>
                {
                    b.HasOne("Entity.CategoryEntity", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Entity.SurveyEntity", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId");

                    b.HasOne("Entity.UserEntity", "User")
                        .WithMany("Questions")
                        .HasForeignKey("UserId");

                    b.Navigation("Category");

                    b.Navigation("Survey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.SurveyEntity", b =>
                {
                    b.HasOne("Entity.UserEntity", "User")
                        .WithMany("Surveys")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.CategoryEntity", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Entity.SurveyEntity", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Categories");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Entity.UserEntity", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Questions");

                    b.Navigation("Surveys");
                });
#pragma warning restore 612, 618
        }
    }
}
